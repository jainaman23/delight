/// Grid system
///   Generate semantic grid columns with these mixins

@import '../variables';

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin siteclearfix {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

/// Centered container element
@mixin make-cover($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include siteclearfix;
}

/// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include siteclearfix;
}

@mixin make-xs-column-offset($columns) {
  @media (min-width: $screen-xs-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

/// Packets Generator
///
/// @param $i;
///   Counter
@mixin make-all-packs {
  @include make-xxs-packs;
  @include make-xs-packs;
  @include make-sm-packs;
  @include make-md-packs;
  @include make-lg-packs;
  @include make-packs;
}

@mixin make-all-boxes {
  @include make-xxs-boxes;
  @include make-xs-boxes;
  @include make-sm-boxes;
  @include make-md-boxes;
  @include make-lg-boxes;
  @include make-boxes;
}

/// Case
@mixin isolate-case() {
  min-height: 1px;
  padding-left:  ceil(($grid-gutter-width / 2));
  padding-right: floor(($grid-gutter-width / 2));
}

@mixin make-lg-packs($i: 1, $columns: $grid-columns) {
  $packs-all: ".pack-lg-#{$i}";
  @media all and (min-width: $lg) {
    @for $i from (1) through $columns {
      $packs: ".pack-lg-#{$i}";
      $packs-all: "#{$packs-all}, #{$packs}";
      #{$packs} {
        width: percentage((1/$columns)*$i);
        float: left;
      }
    }
  }
}
@mixin make-md-packs($i: 1, $columns: $grid-columns) {
  $packs-all: ".pack-md-#{$i}";
  @media all and (min-width: $md) {
    @for $i from (1) through $columns {
      $packs: ".pack-md-#{$i}";
      $packs-all: "#{$packs-all}, #{$packs}";
      #{$packs} {
        width: percentage((1/$columns)*$i);
        float: left;
      }
    }
  }
}
@mixin make-sm-packs($i: 1, $columns: $grid-columns) {
  $packs-all: ".pack-sm-#{$i}";
  @media all and (min-width: $sm) {
    @for $i from (1) through $columns {
      $packs: ".pack-sm-#{$i}";
      $packs-all: "#{$packs-all}, #{$packs}";
      #{$packs} {
        width: percentage((1/$columns)*$i);
        float: left;
      }
    }
  }
}
@mixin make-xs-packs($i: 1, $columns: $grid-columns) {
  $packs-all: ".pack-xs-#{$i}";
  @media all and (min-width: $xs) {
    @for $i from (1) through $columns {
      $packs: ".pack-xs-#{$i}";
      $packs-all: "#{$packs-all}, #{$packs}";
      #{$packs} {
        width: percentage((1/$columns)*$i);
        float: left;
      }
    }
  }
}
@mixin make-xxs-packs($i: 1, $columns: $grid-columns) {
  $packs-all: ".pack-xxs-#{$i}";
  @media all and (min-width: $xxs) {
    @for $i from (1) through $columns {
      $packs: ".pack-xxs-#{$i}";
      $packs-all: "#{$packs-all}, #{$packs}";
      #{$packs} {
        width: percentage((1/$columns)*$i);
        float: left;
      }
    }
  }
}

@mixin make-lg-boxes($i: 1, $columns: $grid-columns) {
  $box-all: ".box-lg-#{$i}";
  @media all and (min-width: $lg) {
    @for $i from (1) through $columns {
      $box: ".box-lg-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
      #{$box} {
        & > .box {
          width: percentage(1/$i);
          float: left;
        }
      }
    }
  }
}

@mixin make-md-boxes($i: 1, $columns: $grid-columns) {
  $box-all: ".box-md-#{$i}";
  @media all and (min-width: $md) {
    @for $i from (1) through $columns {
      $box: ".box-md-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
      #{$box} {
        & > .box {
          width: percentage(1/$i);
          float: left;
        }
      }
    }
  }
}


@mixin make-sm-boxes($i: 1, $columns: $grid-columns) {
  $box-all: ".box-sm-#{$i}";
  @media all and (min-width: $sm) {
    @for $i from (1) through $columns {
      $box: ".box-sm-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
      #{$box} {
        & > .box {
          width: percentage(1/$i);
          float: left;
        }
      }
    }
  }
}

@mixin make-xs-boxes($i: 1, $columns: $grid-columns) {
  $box-all: ".box-xs-#{$i}";
  @media all and (min-width: $xs) {
    @for $i from (1) through $columns {
      $box: ".box-xs-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
      #{$box} {
        & > .box {
          width: percentage(1/$i);
          float: left;
        }
      }
    }
  }
}

@mixin make-xxs-boxes($i: 1, $columns: $grid-columns) {
  $box-all: ".box-xxs-#{$i}";
  @media all and (min-width: $xxs) {
    @for $i from (1) through $columns {
      $box: ".box-xxs-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
      #{$box} {
        & > .box {
          width: percentage(1/$i);
          float: left;
        }
      }
    }
  }
}


@mixin make-boxes($i: 1, $columns: $grid-columns) {
  $case: 'lg';
  $box-all: ".box-#{$case}-#{$i}";
  @each $case in lg, md, sm, xs, xxs {
    @for $i from (1) through $columns {
      $box: ".box-#{$case}-#{$i}";
      $box-all: "#{$box-all}, #{$box}";
    }
  }

  #{$box-all} {
    @include siteclearfix;
  }
}

@mixin make-packs($i: 1, $columns: $grid-columns) {
  $case: 'lg';
  $pack-all: ".pack-#{$case}-#{$i}";
  @each $case in lg, md, sm, xs, xxs {
    @for $i from (1) through $columns {
      $pack: ".pack-#{$case}-#{$i}";
      $pack-all: "#{$pack-all}, #{$pack}";
    }
  }


  #{$pack-all} {
    min-height: 1px;
  }
}
